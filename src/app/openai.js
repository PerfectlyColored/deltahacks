import OpenAI from 'openai';
import emailjs from '@emailjs/browser';
function sendEmail(message) {
    var templateParams = {
        to_name: 'James',
        from_name: "Aidan",
        message: message
    };
           emailjs.send('dino579892', 'template_0baw48r', templateParams, 'F3DzbtF6AEJ55pJ7w')
      .then((result) => {
          console.log(result.text);
          window.location.replace("/");
      }, (error) => {
          console.log(error.text);
      });
  }

export default async function gpt() {
     const openai = new OpenAI({
        apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
      dangerouslyAllowBrowser: true});


      try {

        // The openai.chat.completions.create is a bulilt in method in the imported api which sends a message
        // with role system and the content is the user input.
        const healthUpdateReportTemplate = `I have this template:
\nPatient Health Update Report\n

  


  

\n--------------------------------------------\n

  

\nPatient Information\n 

\n• Full Name: [Patient's Full Name]\n 

\n• Contact: [Patient's Contact Number], [Patient's Email]\n 

  

\n--------------------------------------------\n 

  

\nSummary of Symptoms and Well-being\n 

\n• Symptoms Reported: [List of symptoms as reported by the patient]\n 

\n• Well-being Score: [Patient's self-rated well-being score out of 5]\n 

\n• Notable Changes: [Any significant changes in symptoms or well-being score since the last report]\n 

  

\n--------------------------------------------\n 

  

\nMedication Adherence\n 

\n• Medications Taken: [List of medications and whether they were taken as prescribed]\n 

\n• Missed Medications: [Any medications that were missed]\n 

\n• Reported Side Effects: [Any side effects reported by the patient]\n 

  

\n--------------------------------------------\n 

  

\nAlert Level Determination\n 

\n• Urgency: [Assessed level of urgency: Low, Moderate, High]\n 

\n• Reason: [Reason for the assigned urgency level]\n 

  

\n--------------------------------------------\n 

  

\nSpecific Concerns\n 

\n• Patient Notes: [Any additional notes or concerns expressed by the patient]\n 

  

\n--------------------------------------------\n 

  

\nRecommended Action\n 

[Any recommended action based on the symptoms]

\n--------------------------------------------\n 

  

\nHistorical Data Comparison\n 

\n• Previous Symptoms: [Comparison with the previous report's symptoms, if available]\n 

\n• Previous Well-being Score: [Comparison with the previous report's well-being score]\n 

  

\n--------------------------------------------\n 

  

\nReport Generated by CareLink\n 

  

\n--------------------------------------------\n 

I have this sample patient report:`;

let checkinAnswers = ["","","","","",""];
let p = {};
if (typeof window !== 'undefined') {
    checkinAnswers = JSON.parse(localStorage.getItem('checkin'));
    p = JSON.parse(localStorage.getItem('profile'));
    
}
//exactly like how it's given from the above sample patient report but also output the results exactly like the template
const question = `\nFill out the template by using the above sample patient report and replacing whatever's inside the square brackets, use all the same - "dashes" and symbols?`;

const newSymptoms = checkinAnswers[0];
const rating = checkinAnswers[1];
const sideEffects = checkinAnswers[2];
const changes = checkinAnswers[3];
const newConcerns = checkinAnswers[4];
const urgencyCheck = checkinAnswers[5];

const finishedPrompt = `Basic Information:\n Full Name: ${p.name}\n Date of Birth: ${p.birth}\n Gender: ${p.gender}\n Email: ${p.email}\n
Phone Number: ${p.phone}\n Address: ${p.address}\n PSW Contact Info: ${p.PSW}\n Nurse Contact Info: ${p.nurse}\n
Medical History\n Medical Conditions: ${p.conditions}\n Previous Surgeries: ${p.previous}\n
Allgeries: ${p.allergies}\n Medication History\n Current Meds: ${p.current}\n Dosages/Frequencies: ${p.dosages}\n
Family Medical History:\n Chronic Illness: ${p.family}\n Social History\n Job/Work Enviornment: ${p.work}\n
Alchol Consumption: ${p.alcohol}\n Recreational Drug Use: ${p.drug}\n Lifestyle Factors\n diets/nutrition: ${p.diet}\n
Physical Activity: ${p.exercise}\n Sleep Patterns: ${p.sleep}\n Symptom Check\n ${newSymptoms}\n
Well-being Score: ${rating}\n Side Effects: ${sideEffects}\n General Health and Lifestyle: ${changes}\n
Additional Observations: ${newConcerns}\n Urgency of Care: ${urgencyCheck}\n`;

const completePrompt = `${healthUpdateReportTemplate} \n ${finishedPrompt} \n ${question}`;  
console.log(completePrompt);
//console.log(completePrompt);     
const completion = await openai.chat.completions.create({
            messages: [{ role: "system", content: completePrompt }],
            // This is the model of the bot
            model: "gpt-3.5-turbo",
          });
        
      //console.log(p);
      // output the bot response from the the completion component and store it in the ApiResponse state
      let message = completion.choices[0].message.content;
      console.log(message);
      if (typeof window !== 'undefined') {
        console.log("setting localstorage report");
        localStorage.setItem('report',message);
    }
      sendEmail(message);
    } catch (e) {
      console.log(e);
     }

};
      
